<?xml version="1.0" encoding="utf-8"?>
<problem
    package="c.allocator"
    id="malloc"
    type="standard">
  <statement language="ru_RU">
    <description>
      <p>Напишите подпрограммы <code>void *alloc_mem(size_t size)</code> и <code>void free_mem(void *ptr)</code>,
          которые аллоцируют и высвобождают память на куче.</p>
      <p>Подпрограмма <code>alloc_mem</code>:</p>
      <ul>
          <li>принимает один параметр <code>size</code> (32-битное беззнаковое число типа size_t) —
        минимальный размер (в байтах) блока памяти,
        который нужно аллоцировать;</li>
        <li>возвращает адрес блока памяти не менее чем требуемого размера либо NULL (0).</li>
      </ul>

      <p>В тестирующей программе будет определена глобальная переменная <code>struct block* freelist;</code>, в которой
        хранится список свободных блоков памяти:</p>
    <p><img src="${getfile}=image.png"/></p>

    <p>Структура <code>block</code> определена следующим образом:</p>
    <pre>struct block {
    uint32_t size;
    struct block* next;
};</pre>

    <p>Поле <code>size</code> хранит (размер блока в байтах минус 4),
        поле <code>next</code> — адрес следующего блока
        в списке. Если в списке есть блоки, у которых записанный размер не меньше size, <code>alloc_mem</code>
        должна удалить первый такой блок из списка и вернуть вызывающей подпрограмме адрес тела этого блока
        (адрес блока, увеличенный на 4).</p>
    <p>Если в списке <code>freelist</code> подходящих блоков нет, то <code>alloc_mem</code> использует
        функцию <code>sbrk</code>, чтобы запросить у системы <code>4 + actual_size</code> байт
        дополнительной памяти. <code>actual_size</code> вычисляется как <code>max(4, align4(size))</code>,
        где align4 – операция округления вверх до числа, кратного 4.</p>

    <p>Функция <code>sbrk</code> (см. <code>man sbrk</code>) объявлена
        в системном заголовочном файле <code>unistd.h</code>. Она возвращает либо указатель
        на новый блок памяти заданного размера, полученный у операционной системы,
        либо (в случае неудачи) специальное значение <code>(void *)(-1)</code>.</p>

     <p>Если <code>sbrk</code> отработал успешно, то <code>alloc_mem</code> записывает
        <code>actual_size</code> в первое машинное слово полученного участка памяти
        и возвращает адрес второго машинного слова.</p>

    <p>В случае, если выделить память не удалось (результат <code>sbrk</code> -1),
        <code>alloc_mem</code> должна вернуть NULL. При этом подпрограмма
        <code>alloc_mem</code> должна остаться работоспособной (иметь возможность в дальнейшем выделить
        меньший объём памяти, если это возможно).</p>

    <p>Подпрограмма <code>free_mem</code> принимает один параметр — адрес, который ранее вернула
        подпрограмма <code>alloc_mem</code>. Соответствующий блок памяти должен
        быть добавлен в голову списка <code>freelist</code>.
        </p>

    </description>
  </statement>
</problem>
