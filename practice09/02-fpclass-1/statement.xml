<?xml version="1.0" encoding="utf-8" ?>
<problem
        package="c.floats"
        id="fpclass-1"
        type="standard">
  <statement language="ru_RU">
    <description>
<p>Дан следующий перечислимый тип, описывающий классификацию значений типа float:</p>

<pre>
typedef enum FPClass
{
    FFP_ZERO,         // нули
    FFP_DENORMALIZED, // числа в денормализованной форме
    FFP_NORMALIZED,   // числа в нормализованной форме
    FFP_INF,          // бесконечности
    FFP_NAN           // NaN-ы
} FPClass;
</pre>

Напишите следующую функцию:

<pre>
FPClass fpclassf(float value, int *psign);
</pre>

<p>Функция на вход принимает число <tt>value</tt> типа <tt>float</tt> и возвращает значение,
    соответствующее классу этого числа.
Если число не является <tt>NaN</tt>, то в переменную <tt>psign</tt> возвращается бит знака числа.
Для чисел <tt>NaN</tt> бит знака всегда должен быть 0.
</p>

<p>При сдаче функции на проверку должно присутствовать только тело функции. Ни определение перечислимого типа <tt>FPClass</tt>,
ни функция <tt>main</tt> присутствовать не должна.</p>

<p>Запрещается использовать стандартные функции и расширения gcc для
классификации чисел.</p>

<p>Запрещается использовать значения вещественных типов
    как аргументы любых операторов, кроме оператора присваивания <code>=</code>
    и оператора взятия адреса <code>&amp;</code>. Например:</p>

<pre>
float copy_f = value;            // можно
float *ptr = &amp;value;         // можно
bool small = (value &lt; 1e-38); // нельзя использовать оператор &lt; с вещественными аргументами
</pre>

</description>
  </statement>
<review_comments>
  <comment>Магические числа должны быть вынесены в константы и документированы</comment>
<comment>Лишние #include</comment>
</review_comments>
</problem>
